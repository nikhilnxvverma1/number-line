{"mappings":"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","sources":["src/number-line.ts"],"sourcesContent":["/** Configurational description of the number line */\nexport interface INumberLineOptions{\n\t/**\n\t * The genesys pattern that needs to be repeated over\n\t * the course of the number line's length. Each item is a tick\n\t * that has a length. The array must have at least one item.\n\t */\n\tpattern:number[];\n\t/** Base value of the number line for the area covered by {@link baseLength} */\n\tbaseCoverage:number;\n\t/** \n\t * Length of the number line basis which all calculations are performed.\n\t * Note that the number line is virtually infinite but {@link baseLength}\n\t * along with {@link baseCoverage} governs the starting scale\n\t */\n\tbaseLength:number;\n\t/** The lower bound breakpoint for unit length*/\n\tbreakpointLowerbound:number;\n\t/** The upper bound breakpoint for unit length*/\n\tbreakpointUpperBound:number;\n\t/** The labelling strategy for tick marks */\n\tlabelStrategy:ITickMarkLabelStrategy;\n\t/** \n\t * A number (preferably close to 1) that governs how fast\n\t * the tick marks stretches upto {@link breakpointUpperBound} \n\t * before resetting back to the defined {@link breakpointLowerbound}. \n\t * The smaller the number the faster tick marks stretch. This number \n\t * must always be greater than 1\n\t * @default 1.3\n\t */\n\tstretchModulo?:number;\n\t/** \n\t * The initial displacement of the number line\n\t * with respect to the origin.\n\t * @default 0 \n\t */\n\tinitialDisplacement?:number;\n\t/** \n\t * The initial magnification of the number line.\n\t * @default 1 \n\t */\n\tinitialMagnification?:number;\n\t/** \n\t * The last value on the number line. Setting this value\n\t * means that the number line is bound.Optional.\n\t */\n\tfiniteEnd?:number;\n\t/** \n\t * Stretches the entire number line such that the first\n\t * value is the starting value and the last value is the\n\t * ending value. Requires {@link finiteEnd} to be set. \n\t * @default false\n\t */\n\tstretchToFit?:boolean;\n}\n\n\n/** \n * A stretchable, zoomable number line view model that can\n * be used to construct functional rulers and graphs \n */\nexport class NumberLine{\n\n\tprivate _displacement:number = 0;\n\tprivate _magnification:number = 1;\n\tprivate _unitLength:number = -1;\n\tprivate _unitValue:number = -1;\n\n\t\n\tconstructor(private readonly _options:INumberLineOptions){\n\t\tthis.initialize();\n\t}\n\n\tprivate initialize(){\n\t\tthis.options.initialDisplacement = this.options.initialDisplacement==undefined?0:this.options.initialDisplacement;\n\t\tthis.options.initialMagnification = this.options.initialMagnification==undefined?1:this.options.initialMagnification;\n\t\tif(this.options.initialMagnification==undefined){\n\t\t\tthis.options.initialMagnification = 1;\n\t\t}else if(this.options.initialMagnification<0){\n\t\t\tthrow new Error(\"Initial Magnfication can never be negative. Try a number between 0 and 1 if you want to zoom out\");\n\t\t}\n\t\tif(this.options.stretchModulo==undefined){\n\t\t\tthis.options.stretchModulo = 1.3;\n\t\t}else if(this.options.stretchModulo<=1){\n\t\t\tthrow new Error(\"Stretch modulo cannot be <=1\");\n\t\t}\n\t\tthis.options.stretchToFit = this.options.stretchToFit==undefined?false:this.options.stretchToFit;\n\t\t\n\t\tthis._magnification = this.options.initialMagnification;\n\t\tthis._displacement = this.options.initialDisplacement;\n\t\tthis.computeScale();\n\t\tif(this.options.stretchToFit && this.options.finiteEnd!=undefined){\n\t\t\tthis.stretchToFit(this.options.finiteEnd);\n\t\t}\n\t}\n\n\t/**\n\t * Stretches the entire number line such that the first\n\t * value is the starting value(0) and the last value is the\n\t * {@link finalValue}\n\t * @param finalValue The last value on the number line\n\t */\n\tstretchToFit(finalValue: number) {\n\t\tif(finalValue<=0){\n\t\t\tthrow new Error(\"Final value has to be positive. Consider using rangeFit instead\");\n\t\t}\n\t\tthis._displacement = 0;\n\t\tthis._magnification = this.baseCoverage / finalValue;\n\t\tthis.computeScale();\n\t}\n\n\t/**\n\t * Fits a range within the base length\n\t * @param startValue Smaller value\n\t * @param endValue Bigger value\n\t */\n\trangeFit(startValue:number,endValue:number){\n\t\tif(endValue<=startValue){\n\t\t\tthrow new Error(\"Ending value has to be greater than starting value\");\n\t\t}\n\t\tconst difference = endValue - startValue;\n\t\tthis.stretchToFit(difference);\n\t\tthis.moveBy(startValue*this.magnification);\n\t}\n\n\t/** \n\t * Internal method that must be called everytime there is a change in magnification,\n\t * so as to recompute unit length and unit value. Computes in O(1) time\n\t * */\n\tprivate computeScale(){\n\t\tconst repeater = 1 + this.magnification%this.options.stretchModulo;\n\t\tthis._unitLength = rangeMapper(\n\t\t\t\t\t\t\trepeater,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\tthis.options.stretchModulo+1,\n\t\t\t\t\t\t\tthis.options.breakpointLowerbound,\n\t\t\t\t\t\t\tthis.options.breakpointUpperBound);\n\n\t\tconst unitCount = this.baseLength / this._unitLength;\n\t\t// last value is unitCount * unit value\n\t\t// therefore, as magnification inversely divides last value\n\t\tthis._unitValue = this.baseCoverage/(this.magnification*unitCount);\n\t\t\n\t}\n\n\t/**\n\t * Computes the value at specified distance from origin in O(1) time\n\t * @param location Position along the number line\n\t * @param wrtOrigin True implies location is with respect to origin.\n\t * False gives location with respect to the assumed start.\n\t * @returns the value on the number line on that distance\n\t */\n\tvalueAt(location:number,wrtOrigin:boolean):number{\n\t\tthis.computeScale();\n\t\tif(wrtOrigin){\n\t\t\treturn (location/this.unitLength) * this.unitValue;\n\t\t}else{\n\t\t\t// find out value since left most point (origin)\n\t\t\tconst unitCount = location/this.unitLength;\n\t\t\tconst valueSinceOrigin = unitCount * this.unitValue;\n\t\t\t// find out the value of displacement\n\t\t\tconst valueOfDisplacement = (this.displacement/this.unitLength)*this.unitValue;\n\t\t\treturn valueOfDisplacement + valueSinceOrigin;\n\t\t}\n\t}\n\n\t/**\n\t * Computes and returns the location of the \n\t * given value along the number line\n\t * @param value value that rests at the number line\n\t * @param wrtOrigin True implies location is with respect to origin.\n\t * False gives location with respect to the assumed start.\n\t * @returns The location of this value w.r.t origin\n\t */\n\tlocationOf(value:number,wrtOrigin:boolean):number{\n\t\tthis.computeScale();\n\t\tif(wrtOrigin){\n\t\t\treturn (value/this.unitValue) * this.unitLength;\n\t\t}else{\n\t\t\treturn (value/this.unitValue) * this.unitLength - this.displacement;\n\t\t}\n\t}\n\n\t/** \n\t * Builds a view model describing this number line \n\t * @returns A view model useful for rendering this number line\n\t * through any rendering technology or format\n\t */\n\tbuildViewModel(length:number):NumberLineViewModel{\n\t\tthis.computeScale();\n\t\t\n\t\tconst tickGap = this.tickGap;\n\t\tconst unitLength = this.unitLength;\n\t\tconst unitValue= this.unitValue;\n\t\tconst tickValue= unitValue/this.tickCount;\n\t\t\n\t\tlet firstTickMarkValue:number;\n\t\tlet firstTickMarkIndex:number;\n\t\tlet firstTickMarkPosition:number;\n\t\tlet totalNegativeTicks:number;\n\t\tif(this.displacement>=0){\n\t\t\tconst tickCountsTillFirstTick = Math.ceil((this.displacement/unitLength)*this.tickCount)\n\t\t\tfirstTickMarkValue = tickCountsTillFirstTick*tickValue;\n\t\t\tfirstTickMarkIndex = tickCountsTillFirstTick % this.tickCount;\n\t\t\tfirstTickMarkPosition = tickCountsTillFirstTick*tickGap - this.displacement;\n\t\t\ttotalNegativeTicks = 0;\n\t\t}else{\n\t\t\tconst tickCountsTillFirstTick = Math.floor((-this.displacement/unitLength)*this.tickCount)\n\t\t\ttotalNegativeTicks = tickCountsTillFirstTick;\n\t\t\tfirstTickMarkValue = -tickCountsTillFirstTick*tickValue;\n\t\t\tfirstTickMarkIndex = this.tickCount - tickCountsTillFirstTick % this.tickCount - 1;\n\t\t\tfirstTickMarkPosition = tickCountsTillFirstTick*tickGap - this.displacement;\n\t\t}\n\n\t\tconst totalTicks = Math.floor((length - firstTickMarkPosition)/tickGap);\n\t\tconst leftoverSpace = length - totalTicks*tickGap;\n\n\t\tconst numberLineViewModel:NumberLineViewModel = {\n\t\t\toffset:firstTickMarkPosition,\n\t\t\tleftoverSpace:leftoverSpace,\n\t\t\tstartingValue:this.firstValue,\n\t\t\tendingValue:this.valueAt(length,false),\n\t\t\tlength:length,\n\t\t\tnumberLine:this,\n\t\t\ttickMarks:[],\n\t\t\tgap:tickGap\n\t\t}\n\n\t\t\n\t\tfor (let i = 0,\n\t\t\tcurrentTickValue = firstTickMarkValue,\n\t\t\tcurrentTickPosition = firstTickMarkPosition,\n\t\t\tcurrentTickIndex = firstTickMarkIndex,\n\t\t\tnegativeTicksLeft = totalNegativeTicks\n\t\t\t; i < totalTicks;\n\t\t\ti++,\n\t\t\tcurrentTickValue+=tickValue,\n\t\t\tcurrentTickPosition+=tickGap,\n\t\t\tnegativeTicksLeft--\n\t\t\t) {\n\n\t\t\t\tconst tickMarkViewModel:TickMarkViewModel={\n\t\t\t\t\tvalue:currentTickValue,\n\t\t\t\t\tposition:currentTickPosition,\n\t\t\t\t\theight:this.options.pattern[currentTickIndex],\n\t\t\t\t\tlabel:this.options.labelStrategy!=null?\n\t\t\t\t\t\tthis.options.labelStrategy.labelFor(\n\t\t\t\t\t\t\tcurrentTickValue,\n\t\t\t\t\t\t\tcurrentTickIndex,\n\t\t\t\t\t\t\tcurrentTickPosition,\n\t\t\t\t\t\t\tthis):\n\t\t\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\tnumberLineViewModel.tickMarks.push(tickMarkViewModel);\n\t\t\t\tconst indexIncrementer = negativeTicksLeft>0?-1:1;\n\t\t\t\tcurrentTickIndex+=indexIncrementer;\n\t\t\t\tif(currentTickIndex<0){\n\t\t\t\t\tcurrentTickIndex=this.tickCount-1;\n\t\t\t\t}else if(currentTickIndex>=this.tickCount){\n\t\t\t\t\tcurrentTickIndex = 0;\n\t\t\t\t}\n\t\t}\n\n\t\treturn numberLineViewModel;\n\t}\n\n\t/** \n\t * Moves the ruler by a specified amount\n\t * @param delta The amount to move by. Value can be either positive or negative\n\t */\n\tmoveBy(delta:number){\n\t\tthis._displacement+=delta;\n\t}\n\n\t/**\n\t * Magnifies the entire ruler either in or out\n\t * @param delta The amount to magnify by (+ve or -ve)\n\t * @param positionFromStart The position on the number line which\n\t * should not move because thats whats being zoomed around.\n\t * This position is relative to the start of the number line\n\t * @returns True if zoom was successful, false if zoom was out of range\n\t */\n\tzoomAround(delta:number,positionFromStart:number):boolean{\n\t\tif(this._magnification+delta<=0){\n\t\t\treturn false;\n\t\t}\n\t\tconst fixedValue = this.valueAt(positionFromStart,false);\n\t\t// const beforeZoom = this.locationOf(fixedValue);\n\t\tthis._magnification+=delta;\n\t\tthis.computeScale();\n\t\tconst afterZoom = this.locationOf(fixedValue,false);\n\t\tconst cancelDifference = afterZoom - positionFromStart;\n\t\tthis.moveBy(cancelDifference);\n\t\treturn true;\n\t}\n\n\tget options():INumberLineOptions{\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * A factor that governs the scale of the number line.\n\t * When magnification==1, you are in the base case.\n\t * When magnification>1, you aer zooming out.\n\t * When magnification is b/w 0 and 1, you are zooming in. \n\t */\n\tget magnification():number{\n\t\treturn this._magnification;\n\t}\n\n\t/** \n\t * The displacement of origin w.r.t the assumed\n\t * starting point of the number line. This can also\n\t * be thought of as offset. \n\t */\n\tget displacement():number{\n\t\treturn this._displacement;\n\t}\n\n\t/** The first value on the number line based on length, displacement and magnification */\n\tget firstValue():number{\n\t\treturn this.valueAt(0,false);\n\t}\n\n\t/** The last value on the number line based on {@link baseLength}, displacement and magnification */\n\tget lastValue():number{\n\t\treturn this.valueAt(this.baseLength,false);\n\t}\n\n\t/** Base final value for magnificaiton = 1, displacement=0 for base length */\n\tget baseCoverage():number{\n\t\treturn this.options.baseCoverage;\n\t}\n\n\t/** Length of each unit based on current magnification, lower and upper breakpoints */\n\tget unitLength():number{\n\t\treturn this._unitLength;\n\t}\n\n\t/** Value of each unit based on magnification and base value of a unit */\n\tget unitValue():number{\n\t\treturn this._unitValue;\n\t}\n\n\t/** \n\t * Shortcut for getting the basis length of the number line,\n\t * w.r.t which all calculations are performed \n\t */\n\tget baseLength():number{\n\t\treturn this.options.baseLength;\n\t}\n\n\t/** Number of tick marks in a unit */\n\tget tickCount():number{\n\t\treturn this.options.pattern.length;\n\t}\n\n\t/** The gap between ticks in a unit. This is based on the length of each unit. */\n\tget tickGap():number{\n\t\treturn this._unitLength/this.tickCount;\n\t}\n}\n\n/** Configurable callback to let the user of NumberLine to define their own tick mark labels */\nexport interface ITickMarkLabelStrategy{\n\t/**\n\t * Callback for getting the tick mark label for each unit.\n\t * @param value Value of this tick mark\n\t * @param index Index of this tick mark in the tick mark pattern\n\t * @param position The position of this tick mark w.r.t start\n\t * @param numberLine The main number line requesting the label\n\t * @returns The formatted tick mark label. Return null for blank tick marks.\n\t */\n\tlabelFor(value:number,index:number,position:number,numberLine:NumberLine):string;\n}\n\n/**\n * Linearly maps a number from the first range to the second range\n * @param x number lying between a and b\n * @param a lowerbound of first range\n * @param b upperbound of first range\n * @param c lowerbound of second range\n * @param d upperbound of second range\n * @returns number between {@link c} and {@link d} as a result of linear mapping\n */\nexport function rangeMapper(x:number,a:number,b:number,c:number,d:number):number{\n\treturn ((x-a)/(b-a))*(d-c) + c;\n}\n\n/** ViewModel that describes what a number line looks like */\nexport interface NumberLineViewModel{\n\t/** The gap at the start of number line before a tick mark begins */\n\toffset:number;\n\t/** The trailing space left between the last tick mark and the length */\n\tleftoverSpace:number\n\t/** Gap between tick marks */\n\tgap:number;\n\t/** Array of tick marks over the length of this view model */\n\ttickMarks:TickMarkViewModel[];\n\t/** The length of this ruler view model */\n\tlength:number;\n\t/** The value at the start of the number line */\n\tstartingValue:number;\n\t/** The value at the end of the number line */\n\tendingValue:number;\n\t/** The number line for which this view model was created */\n\tnumberLine:NumberLine;\n}\n\n/** ViewModel that describes what a tick mark looks like */\nexport interface TickMarkViewModel{\n\t/** Height of the tick as governed by the tick mark pattern */\n\theight:number;\n\t/** Label on the tick mark as directly received from {@link ITickMarkLabelStrategy} */\n\tlabel:string;\n\t/** Value of this tick mark */\n\tvalue:number;\n\t/** Position of this tick mark from the start */\n\tposition:number;\n}"],"names":["NumberLine","_displacement","_magnification","_unitLength","_unitValue","constructor","_options","initialize","options","initialDisplacement","undefined","initialMagnification","Error","stretchModulo","stretchToFit","computeScale","finiteEnd","finalValue","baseCoverage","rangeFit","startValue","endValue","difference","moveBy","magnification","repeater","rangeMapper","breakpointLowerbound","breakpointUpperBound","unitCount","baseLength","valueAt","location","wrtOrigin","unitLength","unitValue","valueSinceOrigin","valueOfDisplacement","displacement","locationOf","value","buildViewModel","length","tickGap","tickValue","tickCount","firstTickMarkValue","firstTickMarkIndex","firstTickMarkPosition","totalNegativeTicks","tickCountsTillFirstTick","Math","ceil","floor","totalTicks","leftoverSpace","numberLineViewModel","offset","startingValue","firstValue","endingValue","numberLine","tickMarks","gap","i","currentTickValue","currentTickPosition","currentTickIndex","negativeTicksLeft","tickMarkViewModel","position","height","pattern","label","labelStrategy","labelFor","push","indexIncrementer","delta","zoomAround","positionFromStart","fixedValue","afterZoom","cancelDifference","lastValue","x","a","b","c","d"],"version":3,"file":"main.js.map"}